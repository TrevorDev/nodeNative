#hdr

#include "vulkan/vulkan.h"//
#include <stdio.h>
#include <stdlib.h>
#define _alloca __builtin_alloca
#define BAIL_ON_BAD_RESULT(result) if (VK_SUCCESS != (result)) { fprintf(stderr, "Failure at %u %s\n", __LINE__, __FILE__); exit(-1); }
#end



class VulkanHelper
{
public:
	VkInstance m_instance;
	VkPhysicalDevice m_defaultPhysicalDevice;
	VkDevice m_device;
	uint32_t m_queueFamilyIndex;
	int m_num;

	VulkanHelper(void) {
		this->m_num = 5;

		//Vulcan init config
		const VkApplicationInfo applicationInfo = {
			VK_STRUCTURE_TYPE_APPLICATION_INFO,
			0,
			"VKComputeSample",
			0,
			"",
			0,
			VK_MAKE_VERSION(1, 0, 9)
		};
		const VkInstanceCreateInfo instanceCreateInfo = {
			VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO,
			0,
			0,
			&applicationInfo,
			0,
			0,
			0,
			0
		};

		//Init Vulkan
		BAIL_ON_BAD_RESULT(vkCreateInstance(&instanceCreateInfo, 0, &this->m_instance));
	};

	void initDevice() {
		//Get default device
		uint32_t physicalDeviceCount = 0;
		BAIL_ON_BAD_RESULT(vkEnumeratePhysicalDevices(this->m_instance, &physicalDeviceCount, 0));
		VkPhysicalDevice* const physicalDevices = (VkPhysicalDevice*)malloc(sizeof(VkPhysicalDevice) * physicalDeviceCount);
		BAIL_ON_BAD_RESULT(vkEnumeratePhysicalDevices(this->m_instance, &physicalDeviceCount, physicalDevices));
		this->m_defaultPhysicalDevice = physicalDevices[0];

		//Get device initialization config
		this->m_queueFamilyIndex = 0;
		BAIL_ON_BAD_RESULT(VulkanHelper::vkGetBestComputeQueueNPH(m_defaultPhysicalDevice, &this->m_queueFamilyIndex));
		const float queuePrioritory = 1.0f;
		const VkDeviceQueueCreateInfo deviceQueueCreateInfo = {
			VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO,
			0,
			0,
			this->m_queueFamilyIndex,
			1,
			&queuePrioritory
		};
		const VkDeviceCreateInfo deviceCreateInfo = {
			VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO,
			0,
			0,
			1,
			&deviceQueueCreateInfo,
			0,
			0,
			0,
			0,
			0
		};

		//Initialize logical device
		BAIL_ON_BAD_RESULT(vkCreateDevice(m_defaultPhysicalDevice, &deviceCreateInfo, 0, &this->m_device));
	};

	VkDeviceMemory allocGPUMemory(uint32_t bufferSize) {
		VkPhysicalDeviceMemoryProperties properties;

		vkGetPhysicalDeviceMemoryProperties(this->m_defaultPhysicalDevice, &properties);

		// const int32_t bufferLength = 16384;

		// const uint32_t bufferSize = sizeof(int32_t) * bufferLength;

		// we are going to need two buffers from this one memory
		const VkDeviceSize memorySize = bufferSize;

		// set memoryTypeIndex to an invalid entry in the properties.memoryTypes array
		uint32_t memoryTypeIndex = VK_MAX_MEMORY_TYPES;

		for (uint32_t k = 0; k < properties.memoryTypeCount; k++) {
			if ((VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT & properties.memoryTypes[k].propertyFlags) &&
			        (VK_MEMORY_PROPERTY_HOST_COHERENT_BIT & properties.memoryTypes[k].propertyFlags) &&
			        (memorySize < properties.memoryHeaps[properties.memoryTypes[k].heapIndex].size)) {
				memoryTypeIndex = k;
				break;
			}
		}

		BAIL_ON_BAD_RESULT(memoryTypeIndex == VK_MAX_MEMORY_TYPES ? VK_ERROR_OUT_OF_HOST_MEMORY : VK_SUCCESS);

		const VkMemoryAllocateInfo memoryAllocateInfo = {
			VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO,
			0,
			memorySize,
			memoryTypeIndex
		};
		
		VkDeviceMemory memory;
    	BAIL_ON_BAD_RESULT(vkAllocateMemory(this->m_device, &memoryAllocateInfo, 0, &memory));
    	return memory;
	}

	void* mapGPUMemoryToCPU(VkDeviceMemory memory, uint32_t bufferSize) {
		void* payload;
		const VkDeviceSize memorySize = bufferSize;
   		BAIL_ON_BAD_RESULT(vkMapMemory(this->m_device, memory, 0, memorySize, 0, (void **)&payload));
   		return payload;
	}

	void unmapCPUMemoryBackToGPU(VkDeviceMemory memory) {
		vkUnmapMemory(this->m_device, memory);
	}

	void applyShader(VkDeviceMemory memory, uint32_t bufferSize){
		const VkBufferCreateInfo bufferCreateInfo = {
	      VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO,
	      0,
	      0,
	      bufferSize,
	      VK_BUFFER_USAGE_STORAGE_BUFFER_BIT,
	      VK_SHARING_MODE_EXCLUSIVE,
	      1,
	      &this->m_queueFamilyIndex
	    };

	    VkBuffer in_buffer;
	    BAIL_ON_BAD_RESULT(vkCreateBuffer(this->m_device, &bufferCreateInfo, 0, &in_buffer));

	    BAIL_ON_BAD_RESULT(vkBindBufferMemory(this->m_device, in_buffer, memory, 0));

	    //NEED TO ALOCATE DOUBLE SPACE FOR SECOND BUFFER IF NEEDED
	    // VkBuffer out_buffer;
	    // BAIL_ON_BAD_RESULT(vkCreateBuffer(this->m_device, &bufferCreateInfo, 0, &out_buffer));

	    // BAIL_ON_BAD_RESULT(vkBindBufferMemory(this->m_device, out_buffer, memory, bufferSize));
	}

	int getNum() {
		return this->m_num;
	}
	static double version () { return 0.1; };


	static VkResult vkGetBestComputeQueueNPH(VkPhysicalDevice physicalDevice, uint32_t* queueFamilyIndex) {
		uint32_t queueFamilyPropertiesCount = 0;
		vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, &queueFamilyPropertiesCount, 0);

		VkQueueFamilyProperties* const queueFamilyProperties = (VkQueueFamilyProperties*)_alloca(sizeof(VkQueueFamilyProperties) * queueFamilyPropertiesCount);

		vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, &queueFamilyPropertiesCount, queueFamilyProperties);

		// first try and find a queue that has just the compute bit set
		for (uint32_t i = 0; i < queueFamilyPropertiesCount; i++) {
			// mask out the sparse binding bit that we aren't caring about (yet!) and the transfer bit
			const VkQueueFlags maskedFlags = (~(VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT) &
			                                  queueFamilyProperties[i].queueFlags);

			if (!(VK_QUEUE_GRAPHICS_BIT & maskedFlags) && (VK_QUEUE_COMPUTE_BIT & maskedFlags)) {
				*queueFamilyIndex = i;
				return VK_SUCCESS;
			}
		}

		// lastly get any queue that'll work for us
		for (uint32_t i = 0; i < queueFamilyPropertiesCount; i++) {
			// mask out the sparse binding bit that we aren't caring about (yet!) and the transfer bit
			const VkQueueFlags maskedFlags = (~(VK_QUEUE_TRANSFER_BIT | VK_QUEUE_SPARSE_BINDING_BIT) &
			                                  queueFamilyProperties[i].queueFlags);

			if (VK_QUEUE_COMPUTE_BIT & maskedFlags) {
				*queueFamilyIndex = i;
				return VK_SUCCESS;
			}
		}

		return VK_ERROR_INITIALIZATION_FAILED;
	}

};